//Esses estilos se aplicam a todas as rotas no aplicativo, css global de forma tradional
import "./globals.css";
/**
 * * OTIMIZAÇÃO DE FONTE
 *
 *  next/font otimizará automaticamente suas fontes (incluindo fontes personalizadas) e removerá solicitações de rede externa para melhorar a privacidade e o desempenho.
 *
 * * FONTS DO GOOGLE
 *
 * Hospede automaticamente qualquer fonte do Google.
 *
 * importando a fonte que gostaria de usar como uma function
 */
import { Inter } from "next/font/google";

//Se carregar uma fonte variável, você não precisa especificar o peso da fonte
const inter = Inter({
  subsets: ["latin"], //google fonts são subsets automaticamente isso reduz o tamnho do arquivo de fonte e melhora o desempenho
  display: "swap",
  style: ["normal"], //podemos especificar varios weights e style usando uma array
  weight: ["400", "700"], //se não puder usar uma fonte variável precisa especificar um peso,
  variable: "--font-inter", //cria uma variavel CSS para poder usar com minha solução preferida
});

/**
 * * METADADOS
 *
 * Os metadados ajudam os mecanismos de pesquisa a entender melhor seu conteúdo (o que pode resultar em melhor SEO) e permitem que você personalize como seu conteúdo é apresentado nas mídias sociais, ajudando a criar uma experiência de usuário mais envolvente e consistente em várias plataformas.Os metadados ajudam os mecanismos de pesquisa a entender melhor seu conteúdo (o que pode resultar em melhor SEO) e permitem que você personalize como seu conteúdo é apresentado nas mídias sociais, ajudando a criar uma experiência de usuário mais envolvente e consistente em várias plataformas.
 *
 * Os metadados podem ser definidos exportando um metadata objeto ou generateMetadata função em um arquivo layout.js ou page.js.
 *
 * aqui vamos definir metadados estaticos, exporta um metadado objeto de um arquivo layout.js ou estático page.js
 */
export const metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
  openGraph: {
    title: "Next.js",
    description: "The React Framework for the web",
  },
};

/**
 * * PÁGINAS E LAYOUTS (2)
 *
 * Root Layout Obrigatorio
 *
 * O layout raiz é definido no nível superior do app diretório e se aplica a todas as rotas. Esse layout permite modificar o HTML inicial retornado do servidor.
 *
 * crie uma interface do usuário compartilhada para um segmento e seus filhos. Um layout envolve uma página ou um segmento filho.
 *
 * @param param0
 * @returns
 */
export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      {/** aplicar a className onde for necessaria, isso garante que a fonte seja pré-carregada somente quando for renderizada */}
      <body className={`${inter.variable}` /*inter.className*/}>
        {children}
      </body>
    </html>
  );
}
